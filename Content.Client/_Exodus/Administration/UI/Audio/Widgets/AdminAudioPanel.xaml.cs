using Robust.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Linq;
using Robust.Shared.Timing;
using Robust.Shared.Audio.Components;
using Robust.Shared.Audio.Systems;

namespace Content.Client.Exodus.Administration.UI.Audio.Widgets;

[GenerateTypedNameReferences]
public sealed partial class AdminAudioPanel : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;

    private readonly SharedAudioSystem _audioSystem;

    public event Action? OnPlayButtonEnabled;
    public event Action? OnStopButtonEnabled;
    public event Action? OnPauseButtonEnabled;
    public event Action<float>? OnPlaybackReleased;
    public event Action<float>? OnVolumeLineTextChanged;
    public event Action<string>? OnAddTrackPressed;
    public event Action<bool>? OnGlobalCheckboxToggled;
    public event Action<Guid>? OnSelectPlayer;
    public event Action<Guid>? OnUnselectPlayer;

    private string _volumeLineText = "";
    private EntityUid _audio;

    public AdminAudioPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _audioSystem = _entitySystem.GetEntitySystem<SharedAudioSystem>();

        PlayButton.OnToggled += (args) =>
        {
            if (args.Button.Pressed)
            {
                OnPlayButtonEnabled?.Invoke();
            }
            else
            {
                PlayButton.Pressed = true;
            }
        };
        StopButton.OnPressed += (args) =>
        {
            if (!PlayButton.Pressed)
                return;

            OnStopButtonEnabled?.Invoke();
            PlayButton.Pressed = false;
        };
        PauseButton.OnPressed += (args) =>
        {
            if (!PlayButton.Pressed)
                return;

            OnPauseButtonEnabled?.Invoke();
            PlayButton.Pressed = false;
        };
        PlaybackSlider.OnReleased += (slider) => OnPlaybackReleased?.Invoke(slider.Value);
        VolumeLine.OnTextEntered += (args) =>
        {
            // performs validation of text the user is typing to field
            // doesn't let type something that isn't a parsible value
            if (float.TryParse(args.Text, out var result))
            {
                _volumeLineText = args.Text;
                OnVolumeLineTextChanged?.Invoke(result);
            }
            else
            {
                args.Control.SetText(_volumeLineText);
            }
        };
        AddTrackButton.OnPressed += (args) =>
        {
            OnAddTrackPressed?.Invoke(TrackPathLine.Text);
            TrackPathLine.SetText("");
        };
        GlobalCheckbox.OnToggled += (args) => OnGlobalCheckboxToggled?.Invoke(args.Pressed);
    }

    public void SetAudioStream(EntityUid audio)
    {
        _audio = audio;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (_entity.TryGetComponent<AudioComponent>(_audio, out var audio))
        {
            var currentTrackLength = _audioSystem.GetAudioLength(audio.FileName);
            var playbackPosition = TimeSpan.FromSeconds(audio.PlaybackPosition);

            UpdateDurationLabel(playbackPosition, currentTrackLength);
            if (!PlaybackSlider.Grabbed)
                UpdatePlaybackPosition(currentTrackLength, playbackPosition);
        }
    }

    public void UpdatePlayersContainer(Dictionary<Guid, string> players, HashSet<Guid> selectedPlayers)
    {
        PlayersContainer.RemoveAllChildren();

        foreach (var player in players)
        {
            var newButton = new Button
            {
                ClipText = true,
                ToggleMode = true,
                Text = player.Value,
                HorizontalExpand = true,
                Pressed = selectedPlayers.FirstOrNull(selectedPlayer => selectedPlayer == player.Key) != null,
                Disabled = GlobalCheckbox.Pressed,
            };
            newButton.OnToggled += (args) =>
            {
                if (args.Pressed)
                {
                    OnSelectPlayer?.Invoke(player.Key);
                }
                else
                {
                    OnUnselectPlayer?.Invoke(player.Key);
                }
            };

            PlayersContainer.AddChild(newButton);
        }
    }

    public void UpdatePlayingState(bool playing)
    {
        PlayButton.Pressed = playing;
    }

    public void UpdateGlobalToggled(bool toggled)
    {
        GlobalCheckbox.Pressed = toggled;
    }

    public void UpdatePlaybackPosition(TimeSpan currentTrackLength, TimeSpan playbackPosition)
    {
        PlaybackSlider.MaxValue = (float)currentTrackLength.TotalSeconds;
        PlaybackSlider.SetValueWithoutEvent((float)playbackPosition.TotalSeconds);
    }

    public void UpdateDurationLabel(TimeSpan playbackPosition, TimeSpan currentTrackLength)
    {
        DurationLabel.Text = $@"{playbackPosition:mm\:ss} / {currentTrackLength:mm\:ss}";
    }

    public void UpdateCurrentTrackLabel(string currentTrack)
    {
        TrackName.Text = currentTrack.Split("/").Last();
    }

    public void UpdateQueue(Queue<string> queue)
    {
        TrackList.RemoveAllChildren();

        foreach (var track in queue.ToList())
        {
            var label = new Label()
            {
                Text = track,
            };
            TrackList.AddChild(label);
        }
    }

    public void UpdateVolume(float volume)
    {
        VolumeLine.SetText(volume.ToString());
        _volumeLineText = volume.ToString();
    }
}
