using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Exodus.Audio.Widgets;

[GenerateTypedNameReferences]
public sealed partial class AdminAudioPanel : DefaultWindow
{
    public event Action? OnPlayButtonEnabled;
    public event Action? OnStopButtonEnabled;
    public event Action? OnPauseButtonEnabled;
    public event Action<float>? OnPlaybackReleased;
    public event Action<float>? OnVolumeLineTextChanged;
    public event Action<string>? OnAddTrackPressed;
    public event Action<bool>? OnGlobalCheckboxToggled;

    private string _volumeLineText = "";

    public AdminAudioPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        PlayButton.OnToggled += (args) =>
        {
            if (args.Button.Pressed)
            {
                OnPlayButtonEnabled?.Invoke();
            }
            else
            {
                PlayButton.Pressed = true;
            }
        };
        StopButton.OnPressed += (args) =>
        {
            if (!PlayButton.Pressed)
                return;

            OnStopButtonEnabled?.Invoke();
            PlayButton.Pressed = false;
        };
        PauseButton.OnPressed += (args) =>
        {
            if (!PlayButton.Pressed)
                return;

            OnPauseButtonEnabled?.Invoke();
            PlayButton.Pressed = false;
        };
        PlaybackSlider.OnReleased += (slider) => OnPlaybackReleased?.Invoke(slider.GetAsRatio());
        VolumeLine.OnTextChanged += (args) =>
        {
            // performs validation of text the user is typing to field
            // doesn't let type something that isn't a parsible value
            if (float.TryParse(args.Text, out var result))
            {
                _volumeLineText = args.Text;
                OnVolumeLineTextChanged?.Invoke(result);
            }
            else
            {
                args.Control.SetText(_volumeLineText);
            }
        };
        AddTrackButton.OnPressed += (args) =>
        {
            OnAddTrackPressed?.Invoke(TrackPathLine.Text);
            TrackPathLine.SetText("");
        };
        GlobalCheckbox.OnToggled += (args) => OnGlobalCheckboxToggled?.Invoke(args.Pressed);
    }
}
