// © Space Wizards Federation, A MIT license, full text: https://raw.githubusercontent.com/space-exodus/space-station-14/master/MIT_LICENSE.TXT
// © Space Exodus, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/space-exodus/space-station-14/master/CLA.txt
// Made by Space Exodus, based on SimpleRadialMenu.xaml.cs by Space Wizards Federation at https://github.com/space-exodus/space-station-14/tree/15c03d05d0c4481b6965137dbca2a5c9df9e2e9d/Content.Client/UserInterface/Controls/SimpleRadialMenu.xaml.cs

using Robust.Client.UserInterface;
using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.GameObjects;
using Robust.Shared.Timing;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Input;
using Content.Client.UserInterface.Controls;

namespace Content.Client.Exodus.UserInterface.Controls;

// In short, this is the same as the SimpleRadialMenu but instead of using TextureButtons in it's buttons base it uses ContainerButton
// which highly expands our abilities in customization

[GenerateTypedNameReferences]
public sealed partial class HealthyRadialMenu : RadialMenu
{
    private EntityUid? _attachMenuToEntity;

    [Dependency] private readonly IClyde _clyde = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IInputManager _inputManager = default!;

    public HealthyRadialMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void Track(EntityUid owner)
    {
        _attachMenuToEntity = owner;
    }

    public void SetButtons(IEnumerable<HealthyRadialMenuOption> models, HealthyRadialMenuSettings? settings = null)
    {
        ClearExistingChildrenRadialButtons();

        var sprites = _entManager.System<SpriteSystem>();
        Fill(models, sprites, Children, settings ?? new HealthyRadialMenuSettings());
    }

    public void OpenOverMouseScreenPosition()
    {
        var vpSize = _clyde.ScreenSize;
        OpenCenteredAt(_inputManager.MouseScreenPosition.Position / vpSize);
    }

    private void Fill(
        IEnumerable<HealthyRadialMenuOption> models,
        SpriteSystem sprites,
        ICollection<Control> rootControlChildren,
        HealthyRadialMenuSettings settings
    )
    {
        var rootContainer = new RadialContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true,
            InitialRadius = settings.DefaultContainerRadius,
            ReserveSpaceForHiddenChildren = false,
            Visible = true
        };
        rootControlChildren.Add(rootContainer);

        foreach (var model in models)
        {
            if (model is HealthyRadialMenuNestedLayerOption nestedMenuModel)
            {
                var linkButton = RecursiveContainerExtraction(sprites, rootControlChildren, nestedMenuModel, settings);
                linkButton.Visible = true;
                rootContainer.AddChild(linkButton);
            }
            else
            {
                var rootButtons = ConvertToButton(model, sprites, settings, false);
                rootContainer.AddChild(rootButtons);
            }
        }
    }

    private RadialMenuContainerButton RecursiveContainerExtraction(
        SpriteSystem sprites,
        ICollection<Control> rootControlChildren,
        HealthyRadialMenuNestedLayerOption model,
        HealthyRadialMenuSettings settings
    )
    {
        var container = new RadialContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true,
            InitialRadius = model.ContainerRadius!.Value,
            ReserveSpaceForHiddenChildren = false,
            Visible = false
        };
        foreach (var nested in model.Nested)
        {
            if (nested is HealthyRadialMenuNestedLayerOption nestedMenuModel)
            {
                var linkButton = RecursiveContainerExtraction(sprites, rootControlChildren, nestedMenuModel, settings);
                container.AddChild(linkButton);
            }
            else
            {
                var button = ConvertToButton(nested, sprites, settings, false);
                container.AddChild(button);
            }
        }
        rootControlChildren.Add(container);

        var thisLayerLinkButton = ConvertToButton(model, sprites, settings, true);
        thisLayerLinkButton.TargetLayer = container;
        return thisLayerLinkButton;
    }

    private RadialMenuContainerButton ConvertToButton(
        HealthyRadialMenuOption model,
        SpriteSystem sprites,
        HealthyRadialMenuSettings settings,
        bool haveNested
    )
    {
        var button = settings.UseSectors
            ? ConvertToButtonWithSector(model, settings)
            : new RadialMenuContainerButton();
        button.SetSize = model.SetSize;
        button.ToolTip = model.ToolTip;

        if (model.Children != null)
        {
            foreach (var child in model.Children)
            {
                button.AddChild(child);
            }
        }

        if (model is HealthyRadialMenuActionOption actionOption)
        {
            button.OnPressed += _ =>
            {
                actionOption.OnPressed?.Invoke();
                if (!haveNested)
                    Close();
            };
        }

        return button;
    }

    private static RadialMenuContainerButtonWithSector ConvertToButtonWithSector(HealthyRadialMenuOption model, HealthyRadialMenuSettings settings)
    {
        var button = new RadialMenuContainerButtonWithSector
        {
            DrawBorder = settings.DisplayBorders,
            DrawBackground = !settings.NoBackground
        };
        if (model.BackgroundColor.HasValue)
        {
            button.BackgroundColor = model.BackgroundColor.Value;
        }

        if (model.HoverBackgroundColor.HasValue)
        {
            button.HoverBackgroundColor = model.HoverBackgroundColor.Value;
        }

        return button;
    }

    private void ClearExistingChildrenRadialButtons()
    {
        var toRemove = new List<Control>(ChildCount);
        foreach (var child in Children)
        {
            if (child != ContextualButton && child != MenuOuterAreaButton)
            {
                toRemove.Add(child);
            }
        }

        foreach (var control in toRemove)
        {
            Children.Remove(control);
        }
    }

    #region target entity tracking

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (_attachMenuToEntity != null)
        {
            UpdatePosition();
        }
    }

    private void UpdatePosition()
    {
        if (!_entManager.TryGetComponent(_attachMenuToEntity, out TransformComponent? xform))
        {
            Close();
            return;
        }

        if (!xform.Coordinates.IsValid(_entManager))
        {
            Close();
            return;
        }

        var coords = _entManager.System<SpriteSystem>().GetSpriteScreenCoordinates((_attachMenuToEntity.Value, null, xform));

        if (!coords.IsValid)
        {
            Close();
            return;
        }

        OpenScreenAt(coords.Position, _clyde);
    }

    #endregion

}


public abstract class HealthyRadialMenuOption
{
    public string? ToolTip { get; init; }

    public IEnumerable<Control>? Children { get; init; }
    public Vector2 SetSize { get; set; } = new Vector2(64f, 64f);
    public Color? BackgroundColor { get; set; }
    public Color? HoverBackgroundColor { get; set; }
}

public abstract class HealthyRadialMenuActionOption(Action onPressed) : HealthyRadialMenuOption
{
    public Action OnPressed { get; } = onPressed;
}

public sealed class HealthyRadialMenuActionOption<T>(Action<T> onPressed, T data)
    : HealthyRadialMenuActionOption(onPressed: () => onPressed(data));

public sealed class HealthyRadialMenuNestedLayerOption(IReadOnlyCollection<HealthyRadialMenuOption> nested, float containerRadius = 100)
    : HealthyRadialMenuOption
{
    public float? ContainerRadius { get; } = containerRadius;

    public IReadOnlyCollection<HealthyRadialMenuOption> Nested { get; } = nested;
}

public sealed class HealthyRadialMenuSettings
{
    /// <summary>
    /// Default container draw radius. Is going to be further affected by per sector increment.
    /// </summary>
    public int DefaultContainerRadius = 100;

    /// <summary>
    /// Marker, if sector-buttons should be used.
    /// </summary>
    public bool UseSectors = true;

    /// <summary>
    /// Marker, if border of buttons should be rendered. Can only be used when <see cref="UseSectors"/> = true.
    /// </summary>
    public bool DisplayBorders = true;

    /// <summary>
    /// Marker, if sector background should not be rendered. Can only be used when <see cref="UseSectors"/> = true.
    /// </summary>
    public bool NoBackground = false;
}

