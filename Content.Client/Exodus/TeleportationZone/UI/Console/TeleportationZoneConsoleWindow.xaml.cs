using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Exodus.TeleportationZone;
using System.Text.RegularExpressions;

namespace Content.Client.Exodus.TeleportationZone.UI.Console;

[GenerateTypedNameReferences]
public sealed partial class TeleportationZoneConsoleWindow : DefaultWindow
{
    public event Action<string>? BluespaceZoneSelected;
    public event Action<NetEntity>? ArrivalObjectSelected;
    public event Action? RefreshBluespaceZonesButtonPressed;
    public event Action? RefreshArrivalObjectsButtonPressed;
    public event Action<int>? MinusMatterButtonPressed;
    public event Action<int>? PlusMatterButtonPressed;
    public event Action? StartTeleportingButtonPressed;
    public Action<float>? CoordXChanged;
    public Action<float>? CoordYChanged;

    private float _ValidCoordX;
    private float _ValidCoordY;

    public TeleportationZoneConsoleWindow()
    {
        RobustXamlLoader.Load(this);

        // Updating lists
        TeleportationZoneRefreshBluespaceZonesButton.OnPressed += _ => RefreshBluespaceZonesButtonPressed?.Invoke();
        TeleportationZoneRefreshArrivalObjectsButton.OnPressed += _ => RefreshArrivalObjectsButtonPressed?.Invoke();
        // Selecting points
        SubnetListBluespaceZones.OnItemSelected += OnSubnetListBluespaceZonesSelected;
        SubnetListArrivalObjects.OnItemSelected += OnSubnetListArrivalObjectsSelected;
        // Increase/Reducing the amount of matter consumed
        TeleportationZoneMinus10MatterButton.OnPressed += OnMinus10MatterButtonPressed;
        TeleportationZoneMinus5MatterButton.OnPressed += OnMinus5MatterButtonPressed;
        TeleportationZoneMinus1MatterButton.OnPressed += OnMinus1MatterButtonPressed;
        TeleportationZonePlus1MatterButton.OnPressed += OnPlus1MatterButtonPressed;
        TeleportationZonePlus5MatterButton.OnPressed += OnPlus5MatterButtonPressed;
        TeleportationZonePlus10MatterButton.OnPressed += OnPlus10MatterButtonPressed;
        // Start teleporting the object
        TeleportationZoneStartTeleportingButton.OnPressed += _ => StartTeleportingButtonPressed?.Invoke();

        MessageEditX.OnTextChanged += OnCoordXChanged;
        MessageEditX.OnTextEntered += OnCoordXEntered;
        MessageEditX.OnFocusExit += OnCoordXFocusExit;

        MessageEditY.OnTextChanged += OnCoordYChanged;
        MessageEditY.OnTextEntered += OnCoordYEntered;
        MessageEditY.OnFocusExit += OnCoordYFocusExit;
    }

    public void UpdateState(TeleportationZoneConsoleUiState state)
    {
        TeleportationZoneStartTeleportingButton.Disabled = !state.CanStartTeleporting;
        TeleportationZoneQuantityOfMatterLabel.Text = Loc.GetString("teleportationZone-console-ui-quantity-of-matter-label", ("amount", state.Matter));
        MessageEditX.Text = state.CoordX.ToString();
        MessageEditY.Text = state.CoordY.ToString();
        AddItemsToLists(state);
    }

    private void AddItemsToLists(TeleportationZoneConsoleUiState state)
    {
        // We clean it so that there are no duplicated buttons
        SubnetListBluespaceZones.Clear();
        SubnetListArrivalObjects.Clear();

        foreach (var zone in state.BluespaceZones)
        {
            var item_zone = SubnetListBluespaceZones.AddItem(zone);
            item_zone.Metadata = zone;
        }

        foreach (var arrivalObject in state.ArrivalObjects)
        {
            var item_object = SubnetListArrivalObjects.AddItem($"{arrivalObject.Value}");
            item_object.Metadata = arrivalObject.Key;
        }
    }

    private void OnMinus10MatterButtonPressed(BaseButton.ButtonEventArgs args)
    {
        MinusMatterButtonPressed!(10);
    }

    private void OnMinus5MatterButtonPressed(BaseButton.ButtonEventArgs args)
    {
        MinusMatterButtonPressed!(5);
    }

    private void OnMinus1MatterButtonPressed(BaseButton.ButtonEventArgs args)
    {
        MinusMatterButtonPressed!(1);
    }

    private void OnPlus1MatterButtonPressed(BaseButton.ButtonEventArgs args)
    {
        PlusMatterButtonPressed!(1);
    }

    private void OnPlus5MatterButtonPressed(BaseButton.ButtonEventArgs args)
    {
        PlusMatterButtonPressed!(5);
    }

    private void OnPlus10MatterButtonPressed(BaseButton.ButtonEventArgs args)
    {
        PlusMatterButtonPressed!(10);
    }

    private void OnSubnetListBluespaceZonesSelected(ItemList.ItemListSelectedEventArgs args)
    {
        BluespaceZoneSelected!((string) SubnetListBluespaceZones[args.ItemIndex].Metadata!);
    }

    private void OnSubnetListArrivalObjectsSelected(ItemList.ItemListSelectedEventArgs args)
    {
        ArrivalObjectSelected!((NetEntity) SubnetListArrivalObjects[args.ItemIndex].Metadata!);
    }

    private void OnCoordXChanged(LineEdit.LineEditEventArgs obj)
    {
        float number = 0f;

        if (obj.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(obj.Text) ||
            string.IsNullOrEmpty(obj.Text))
        {
            return;
        }

        if(!float.TryParse(obj.Text, out number))
            return;

        _ValidCoordX = number;
    }

    private void OnCoordXEntered(LineEdit.LineEditEventArgs obj)
    {
        CoordXChanged?.Invoke(_ValidCoordX);
    }

    private void OnCoordXFocusExit(LineEdit.LineEditEventArgs obj)
    {
        if (obj.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(obj.Text) ||
            string.IsNullOrEmpty(obj.Text))
        {
            obj.Control.Text = _ValidCoordX.ToString().Trim();
        }

        CoordXChanged?.Invoke(_ValidCoordX);
    }

    private void OnCoordYChanged(LineEdit.LineEditEventArgs obj)
    {
        float number = 0f;

        if (obj.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(obj.Text) ||
            string.IsNullOrEmpty(obj.Text))
        {
            return;
        }

        if (!float.TryParse(obj.Text, out number))
            return;

        _ValidCoordY = number;
    }

    private void OnCoordYEntered(LineEdit.LineEditEventArgs obj)
    {
        CoordYChanged?.Invoke(_ValidCoordY);
    }

    private void OnCoordYFocusExit(LineEdit.LineEditEventArgs obj)
    {
        if (obj.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(obj.Text) ||
            string.IsNullOrEmpty(obj.Text))
        {
            obj.Control.Text = _ValidCoordY.ToString().Trim();
        }

        CoordYChanged?.Invoke(_ValidCoordY);
    }
}
